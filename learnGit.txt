1.安装Git
    ~#]yum install git 
2.初始化git版本库
  想要将某一个文件夹纳入到git当中，需要进入到该目录当中,以/data/git目录为例
  ~#] cd /data/git
  ~#] git init   #利用init命令初始化，将git目录纳入到版本库当中
  初始化完成后git目录就是git的工作区
3.创建文件
  在git目录中初始化完成后就会生成一个.git目录的隐藏目录，该目录就是git的版本库请不要手动修改此目录中的文件，在git的版本库当中有许多很重的区，最重要的是stage(或者叫index)的暂存区，还有git自动创建的第一个分支master，以及指向master的指针HEAD。
  ~]# git status   #此命令可以查看当前文件还没有被纳入到版本库当中,所有状态为Untracked。
  ~]# git add learnGit.txt  #此命令是将工作区当中的learnGit.txt文件加入到缓存区当中，此时的文件并未纳入到版本库当中。
  ~]# git status   #再次使用status查看状态就会提示有新的文件在缓存区当中
  ~]# git commit -m "新建文件learnGit"   #此命令是将缓存区中的内容提交到master当中，以此来进行版本管理。 
 -m 参数的作用是对此次提交做一步说明，说明此次做了什么方面的变动
4.查看所做操作
  ~]# git log   #查看版本库中最近到最远的操作记录
  ~]# git log --pretty=oneline   #以时间线方式显示所有的操作记录，简单明了,所显示的共有两个字段,第一个一大串近似乱码的东西为此次操作的版本号,是git通过sha1算法生成，版本的号的作用就是进行版本的回滚与还原最新操作。
5.回退到上一个版本内容
  ~]# git reset --hard HEAD   #git中使用HEAD表示当前最新版本，HEAD^表示上一个版本，HEAD^^表示上上个版本以此类推，如果内容过多则可以使用HEAD~100来表示。
  回退到历史版本之后，如果想回到最新的版本则可以使用git reflog命令来查看所有的操作历史记录，再通过git reset 命令加上需要回退的某个版本的版本号前七位就可以回退到选择的版本
  ~]# git reset --hard '版本号'
6.查看工作区与版本库中的内容对比
  ~]# git diff HEAD -- learnGit.txt
7.清除暂存区与工作区缓存
  (1) 当工作区文件修改之后并没有git add操作，此时修改内容只在工作区的缓存中，要想清除此次的修改操作可以使用git checkout命令
  ~]# git checkout -- learnGit.txt  #执行之后工作区中的缓存内容就会清空，文件内容又会恢复到最新一次版本库中的内容，注意“--”必须要添加，因为checkout也有切换分支的功能
  (2) 当工作区执行git add操作，此时的修改内功被添加到stage暂存区当中，清除此次修改操作则使用git reset 命令
  ~]# git reset HEAD learnGit.txt  #reset命令有回退历史版本功能，也有清空暂存区的功能
  执行完reset命令后stage中的内容被删除，而工作空间中的缓存并没有被清空，需要再次执行git checkout命令来彻底还原文件状态。
  ~]# git checkout -- learnGit.txt
8. 文件删除操作
  ~]# rm -f learnGit.txt   #此次操作只是在工作空间中将文件删除，版本库中的文件还存在，如果是误删除的情况可以使用
  ~]# git checkout -- learnGit.txt   #利用checkout命令从版本库当中将文件还原
  ~]# git rm learnGit.txt  #确定该文件可以删除可以使用git rm 命令将文件从版本库当中删除。
9.创建远程仓库
  (1) 注册github账号
  (2) 创建新的仓库:learnGit
  (3) 仓库创建后是空库，可以将本地仓库内容推送到远程
      ~]# git remote add origin git@github.com:bingo86/learnGit.git  #将本地仓库与远程仓库进行关联
      注意：github支持多种协议，此次使用的是SSH所以需要在本机中创建主机秘钥对，并将公钥发送到github仓库上
      ~]# ssh-keygen -t rsa -C 'walle86@163.com'
      复制id_rsa.pub内容，在github个人主页上选择Account settings，找到SSHKEYS页面，将公钥粘贴到key中保存即可
      ~]# git push -u origin master  #把本地库推送到远程仓库中，由于远程仓库第一次运行时为空，添加-u参数可以将本地master分支推送到远程新的master分支，并且将二者进行关联。
  (4) ~]# git push origin master   #直接使用此命令就可以将本地内容提交至远程仓库当中
10.克隆远程仓库
  (1) ~]# git clone git@github.com:bingo86/gitskill.git(远程需要克隆仓库的名称)

<<<<<<< HEAD
11.创建与合并分支
  git中每次提交都会在git中串成一条线，这条线就是一个分支，git中默认只有一个分支也是主分支，被称为master。初始状态git是一条线，git将master指向最新的提交，再用HEAD指向master就能确定当前分支以及当前分支的提交点。
  (1) ~]# git branch dev    #创建dev分支
      ~]# git checkout dev  #切换到dev分支当中
      方法2：
      ~]# git checkout -b dev  #创建dev分支并切换到dev分支上
  (2) ~]# git branch   #不加参数时查看本地库当中所有的分支
      ~]# git branch -a #查看远程仓库当中的分支结构
  合并分支
      ~]# git merge dev  #将dev分支内容合并的master主分支当中，此时合并速度很快，因为git默认的是fast forward模式
  删除分支
      ~]# git branch -d dev  #将dev分支删除
12.解决分支冲突
    开发当中会遇到一种情景，当前开发的dev分支修改了某个文件恰好在master中也被人修改了，此时在dev分支当中再执行merge操作时会提示报错，此时需要手动解决冲突文件再提交。
      ~]# git status   #查看冲突文件
      ~]# git add "冲突文件" 
      ~]# git commit -m "conflict file"
      ~]# git log --graph --pretty=oneline --abbrev-commit  #查看分支合并图
13.分支管理策略
    在执行分支合并操作时，git会采用fast forward模式，该模式虽然执行速度快但当删除分支后，会丢失分支信息。如果要强制禁用fast forward模式，git会在合并过程中生成一个新的commit提交，以后在执行日志查看时会看出分支信息。
      ~]# git checkout -b dev
      ~]# git add "FILENAME"
      ~]# git commit -m "add newfile"
      ~]# git checkout master
      ~]# git merge --no-ff -m "merge with no-ff" dev
14.BUG分支管理
    在实际开发过程中会遇到一种情形，在dev分支上进行项目开发时接到一个任务来修复之前发布过版本的一个bug，此时dev分支上的内容并没有完成无法提交，此时就可以使用git提供的stash功能来将当前的工作现场先暂时”储藏“起来，等以后再恢复就可以工作。假如说需要修复的是在master分支当中，就需要切换到master分支上来进行创建新的分支修复bug。
      ~]# git stash
      Saved working directory and index state WIP on dev: f52c633 add merge
      ~]# git status   #查看当前工作区中是否是干净的
      ~]# git checkout master
      ~]# git checkout -b issue-101   #创建修复分支并进行切换
      ~]# git add "FILENAME"
      ~]# git commit -m "fix bug 101"
      ~]# git checkout master   #修复完成后切换回master(之前假定的是master有问题)
      ~]# git merge --no-ff -m "merge bug fixed 101" issue-101   #进行分支合并
      ~]# git checkout dev   #切换回之前的开发场景
      ~]# git stash list     #查看之前保存的工作场景在哪
      恢复工作场景有两种方式：
      方法1：
      ~]# git stash apply   #恢复工作场景，但之前存的stash内容并不删除
      ~]# git stash drop    #删除stash 内容
      方法2：
      ~]# git stash pop     #恢复stash中的内容同时删除其中的内容
      方法1的特点在于当保存的场景内容有多个时，可以通过stash apply  "VER-ID"来 恢复到指定的工作场景
  删除分支时如果该分支没有被合并则会提示错误无法删除，此时使用-D参数来进行强制删除。
      ~]# git branch -D issue-101
15.多人协作管理
    当有多人协作时，大家都会往master和dev分支上推送各自修改，通过clone远程仓库时，默认只有master分支，要想通过同步远程dev分支的话需要单独处理。
    ~]# git clone git@github.com:bingo86/learnGit.git    #克隆远程仓库当本地
    ~]# git branch   #查看当前分支只有一个master
    ~]# git checkout -b dev origin/dev   #将远程仓库的dev分支同步到本地
    当多人提交dev分支时，提交操作可能会出现错误
    ~]# git push origin dev   #向远程提交dev分支内容
         ! [rejected]        dev -> dev (non-fast-forward)
         error: failed to push some refs to 'git@github.com:michaelliao/learngit.git'
         hint: Updates were rejected because the tip of your current branch is behind
         hint: its remote counterpart. Integrate the remote changes (e.g.
         hint: 'git pull ...') before pushing again.
         hint: See the 'Note about fast-forwards' in 'git push --help' for details.
    出现该问题的原因就是远程库中的内容与本地提交的内容冲突，需要先将远程库中的内容下载到本地后解决冲突后再次提交。
    ~]# git pull  #获取远程库中的数据
        There is no tracking information for the current branch.
        Please specify which branch you want to merge with.
        See git-pull(1) for details.
        git pull <remote> <branch>
        If you wish to set tracking information for this branch you can do so with:
        git branch --set-upstream-to=origin/<branch> dev
     获取远程数据时也失败了，提示说是因为本地分支并没有与远程分支做链接。
     ~]# git branch --set-upstream-to=origin/dev dev    #远程dev分支与本地dev分支进行关联
     ~]# git pull  #再次获取远程数据成功，但需要先解决冲突问题后再提交。
16.rebase
    多分支共同开发过程中会产生很多次的提交，本地的分支和远程会有版本不同步的情况，使用git status查看时会显示很乱，此时提交时很有可能会发生提交失败的问题，使用git pull来进行本地同步操作，同步完成之后再进行远程推送操作。
    再次使用git log查看时发现提交历史分叉了，当推送的远程仓库时也比较乱，此时就可以推送前先rebase一下，就会将原本分叉的提交整合成一条直线，看上去更加直观了。


